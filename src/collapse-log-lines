#!/usr/bin/env -S java --source 17

import java.io.IOException;
import java.io.PrintStream;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

public class CollapseLogLines {

    public static void main(String[] args) {
        if (args.length == 0) {
            throw new IllegalArgumentException("No input specified");
        }

        if ("--help".equals(args[0]) || "-h".equals(args[0])) {
            printUsage(System.out);
            System.exit(0);
        }

        if (args.length == 1 && "-".equals(args[0])) {
            collapseLogLines(createStdInStream());
        } else {
            collapseLogLines(createFileStream(args));
        }
    }

    private static void collapseLogLines(Stream<String> lineStream) {
        var hasWritten = false;

        for (var it = lineStream.iterator(); it.hasNext();) {
            var line = it.next();
            if (!(line.startsWith(" ") || line.startsWith("\t") || line.isEmpty())) {
                if (hasWritten) {
                    System.out.print("\n");
                } else {
                    hasWritten = true;
                }
            } else {
                System.out.print("|");
            }
            System.out.print(line);
        }
    }

    private static Stream<String> createStdInStream() {
        var scanner = new Scanner(System.in);
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new Iterator<>() {
            @Override
            public boolean hasNext() {
                return scanner.hasNext();
            }

            @Override
            public String next() {
                return scanner.nextLine();
            }
        }, 0), false);
    }

    private static Stream<String> createFileStream(String[] files) {
        return Arrays.stream(files).map(Paths::get).flatMap(file -> {
            try {
                return Files.lines(file);
            } catch (IOException e) {
                throw new UncheckedIOException(e);
            }
        });
    }

    private static void printUsage(PrintStream stream) {
        stream.println("Usage: collapse-log-lines [FILE...]");
        stream.println("       Use '-' to read from stdin.");
    }

}
